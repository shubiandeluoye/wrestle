//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/WJInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace WJ.Input
{
    public partial class @WJInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @WJInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""WJInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e5b33604-d9a5-4224-b102-39b1bca1bcf8"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b9ec3692-e528-423f-a238-f93612fc4dc2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchAngle"",
                    ""type"": ""Button"",
                    ""id"": ""b329b747-1720-4c4b-a169-901136ec76b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Straight Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""3fa32dca-941d-414c-a667-e79c63423f48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Switch Bullet "",
                    ""type"": ""Button"",
                    ""id"": ""c9fa73ff-3f40-40c6-9b29-5e89ee9c1790"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Up Shoot "",
                    ""type"": ""Button"",
                    ""id"": ""5956a9a5-d82f-405e-987c-fa18cd63c664"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Down Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""dd3bb862-8a60-4ce2-85bc-483e8d9b58b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6de5c395-94ad-4631-8844-22202196a45f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""369bc9c7-54a7-473b-bd83-613118b0741a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b7e7fc38-7c1b-4508-b4aa-639e0f9aac6e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""26fb48d3-919c-490c-a5d3-33ea639f4782"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d65cffe9-7088-4f8e-8aca-4dcc6d72cb31"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""12a784c6-4f13-4028-ae1a-8da0ca2a17e4"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchAngle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e6c597a-5698-4f1c-9b49-377af4a92ed0"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Straight Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba3b271f-1371-4ce9-bdb1-36500941bc44"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Bullet "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da759938-ba79-4f7e-a4a3-e6f8862f36d3"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up Shoot "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fef67a7-24d5-44de-b18c-bb2abe6cc99c"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
            m_Player_SwitchAngle = m_Player.FindAction("SwitchAngle", throwIfNotFound: true);
            m_Player_StraightShoot = m_Player.FindAction("Straight Shoot", throwIfNotFound: true);
            m_Player_SwitchBullet = m_Player.FindAction("Switch Bullet ", throwIfNotFound: true);
            m_Player_UpShoot = m_Player.FindAction("Up Shoot ", throwIfNotFound: true);
            m_Player_DownShoot = m_Player.FindAction("Down Shoot", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Movement;
        private readonly InputAction m_Player_SwitchAngle;
        private readonly InputAction m_Player_StraightShoot;
        private readonly InputAction m_Player_SwitchBullet;
        private readonly InputAction m_Player_UpShoot;
        private readonly InputAction m_Player_DownShoot;
        public struct PlayerActions
        {
            private @WJInputActions m_Wrapper;
            public PlayerActions(@WJInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Player_Movement;
            public InputAction @SwitchAngle => m_Wrapper.m_Player_SwitchAngle;
            public InputAction @StraightShoot => m_Wrapper.m_Player_StraightShoot;
            public InputAction @SwitchBullet => m_Wrapper.m_Player_SwitchBullet;
            public InputAction @UpShoot => m_Wrapper.m_Player_UpShoot;
            public InputAction @DownShoot => m_Wrapper.m_Player_DownShoot;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @SwitchAngle.started += instance.OnSwitchAngle;
                @SwitchAngle.performed += instance.OnSwitchAngle;
                @SwitchAngle.canceled += instance.OnSwitchAngle;
                @StraightShoot.started += instance.OnStraightShoot;
                @StraightShoot.performed += instance.OnStraightShoot;
                @StraightShoot.canceled += instance.OnStraightShoot;
                @SwitchBullet.started += instance.OnSwitchBullet;
                @SwitchBullet.performed += instance.OnSwitchBullet;
                @SwitchBullet.canceled += instance.OnSwitchBullet;
                @UpShoot.started += instance.OnUpShoot;
                @UpShoot.performed += instance.OnUpShoot;
                @UpShoot.canceled += instance.OnUpShoot;
                @DownShoot.started += instance.OnDownShoot;
                @DownShoot.performed += instance.OnDownShoot;
                @DownShoot.canceled += instance.OnDownShoot;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @SwitchAngle.started -= instance.OnSwitchAngle;
                @SwitchAngle.performed -= instance.OnSwitchAngle;
                @SwitchAngle.canceled -= instance.OnSwitchAngle;
                @StraightShoot.started -= instance.OnStraightShoot;
                @StraightShoot.performed -= instance.OnStraightShoot;
                @StraightShoot.canceled -= instance.OnStraightShoot;
                @SwitchBullet.started -= instance.OnSwitchBullet;
                @SwitchBullet.performed -= instance.OnSwitchBullet;
                @SwitchBullet.canceled -= instance.OnSwitchBullet;
                @UpShoot.started -= instance.OnUpShoot;
                @UpShoot.performed -= instance.OnUpShoot;
                @UpShoot.canceled -= instance.OnUpShoot;
                @DownShoot.started -= instance.OnDownShoot;
                @DownShoot.performed -= instance.OnDownShoot;
                @DownShoot.canceled -= instance.OnDownShoot;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        public interface IPlayerActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnSwitchAngle(InputAction.CallbackContext context);
            void OnStraightShoot(InputAction.CallbackContext context);
            void OnSwitchBullet(InputAction.CallbackContext context);
            void OnUpShoot(InputAction.CallbackContext context);
            void OnDownShoot(InputAction.CallbackContext context);
        }
    }
}
